[{"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\index.js":"1","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\app\\app.js":"2","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\header\\header.js":"3","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\random-planet\\random-planet.js":"4","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\item-list\\item-list.js":"5","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\services\\swapiService.js":"6","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\spinner-loading\\spinner-loading.js":"7","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\renderItemList\\render-item-list.js":"8","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\person-details\\person-details.js":"9","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\people-page\\people-page.js":"10"},{"size":212,"mtime":1609109329024,"results":"11","hashOfConfig":"12"},{"size":1176,"mtime":1611602982808,"results":"13","hashOfConfig":"12"},{"size":759,"mtime":1609120522419,"results":"14","hashOfConfig":"12"},{"size":1837,"mtime":1611080705464,"results":"15","hashOfConfig":"12"},{"size":916,"mtime":1611506965977,"results":"16","hashOfConfig":"12"},{"size":2287,"mtime":1611506914481,"results":"17","hashOfConfig":"12"},{"size":884,"mtime":1611250591735,"results":"18","hashOfConfig":"12"},{"size":1114,"mtime":1611170603808,"results":"19","hashOfConfig":"12"},{"size":1710,"mtime":1611603322548,"results":"20","hashOfConfig":"12"},{"size":988,"mtime":1611602982793,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"gjjcv5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\index.js",[],["47","48"],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\app\\app.js",[],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\header\\header.js",[],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\random-planet\\random-planet.js",["49"],"import React, { Component } from 'react';\r\nimport './random-planet.css';\r\nimport SwapiService from \"../../services/swapiService\";\r\nimport SpinnerLoading from \"../spinner-loading/spinner-loading\";\r\n\r\nexport default class RandomPlanet extends Component {\r\n\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        planet: {\r\n            id: null,\r\n            planetName: null,\r\n            population: null,\r\n            rotationPeriod: null,\r\n            diameter: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.updatePlanet()\r\n        this.everyUpdatePlanet();\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.myInterval);\r\n    }\r\n    updatePlanet() {\r\n        const id = Math.floor(Math.random()*25) + 2;\r\n        this.swapiService.getPlanet(id)\r\n            .then(planet => this.onPlanetLoaded(planet))\r\n            .catch(() => this.onError())\r\n    }\r\n    onPlanetLoaded(planet) {\r\n        this.setState({planet})\r\n    }\r\n    onError() {\r\n        console.log('error')\r\n    }\r\n    everyUpdatePlanet() {\r\n        this.myInterval = setInterval(() => this.updatePlanet(), 5000)\r\n    }\r\n\r\n    render() {\r\n        const {id, name, population, rotationPeriod, diameter} = this.state.planet;\r\n        return(\r\n            <div className='random-planet'>\r\n                <div className='random-planet__image'>{id ? <img\r\n                    src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}/> : <SpinnerLoading />}</div>\r\n                <div className='detail-description'>\r\n                    <h2 className='detail-description__header'>{name}</h2>\r\n                    <p>Population: {population}</p>\r\n                    <p>Rotation period: {rotationPeriod}</p>\r\n                    <p>Diameter: {diameter}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\item-list\\item-list.js",[],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\services\\swapiService.js",[],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\spinner-loading\\spinner-loading.js",[],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\renderItemList\\render-item-list.js",["50"],"import React, { Component } from \"react\";\r\nimport './render-item-list.css';\r\nimport SpinnerLoading from \"../spinner-loading/spinner-loading\";\r\n\r\nexport default class RenderItemList extends Component {\r\n    times = 0;\r\n    state = {\r\n        loading : true\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.peopleList && this.times < 1) {\r\n            this.times = 1;\r\n            this.setState(() => {\r\n                return {loading: false}\r\n            })\r\n        }\r\n    }\r\n\r\n    itemListRender = () => {\r\n        const { peopleList, onPersonSelected } = this.props;\r\n        return peopleList.map(({id, name}) => {\r\n            return(\r\n                <li className='item-list__item' key={id} onClick={() => onPersonSelected(id)}><span>{name}</span></li>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { peopleList } = this.props;\r\n        const {loading} = this.state;\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {loading ? <SpinnerLoading /> : this.itemListRender()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}",["51","52"],"C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\person-details\\person-details.js",["53"],"import React, { Component } from 'react';\r\nimport SwapiService from \"../../services/swapiService\";\r\nimport SpinnerLoading from \"../spinner-loading/spinner-loading\";\r\nimport './person-details.css';\r\n\r\nexport default class PersonDetails extends Component {\r\n    swapiService = new SwapiService();\r\n\r\n    state = {\r\n        item: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updatePerson();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.personId !== prevProps.personId) {\r\n            this.updatePerson();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.setState({item: null})\r\n    }\r\n\r\n    updatePerson = () => {\r\n        const { personId } = this.props;\r\n        if(!personId) {\r\n            return;\r\n        }\r\n        this.swapiService\r\n            .getPerson(personId)\r\n            .then((item) => {\r\n                this.setState({item})\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.item) {\r\n            return <SpinnerLoading />\r\n        }\r\n\r\n        const { id, name, gender, birthYear, eyeColor } = this.state.item;\r\n        return (\r\n            <div className='list-details'>\r\n                <div className='list-details__img'>\r\n                    <img src={`https://starwars-visualguide.com/assets/img/characters/${id}.jpg`} alt=\"empty image\"/>\r\n                </div>\r\n                <div className='detail-description'>\r\n                    <h2 className='detail-description__header'>{name}</h2>\r\n                    <p>Gender: {gender}</p>\r\n                    <p>Birth year: {birthYear}</p>\r\n                    <p>Eye color: {eyeColor}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\Shaba\\OneDrive\\Рабочий стол\\Prog\\FrontEnd\\JS\\React\\server\\src\\components\\people-page\\people-page.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":46,"column":61,"nodeType":"60","endLine":47,"endColumn":92},{"ruleId":"61","severity":1,"message":"62","line":31,"column":17,"nodeType":"63","messageId":"64","endLine":31,"endColumn":27},{"ruleId":"54","replacedBy":"65"},{"ruleId":"56","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":46,"column":21,"nodeType":"60","endLine":46,"endColumn":118},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'peopleList' is assigned a value but never used.","Identifier","unusedVar",["69"],["70"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]